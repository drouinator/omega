name: Omega CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**', 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Check formatting with black
        run: black --check .
      - name: Check import sorting with isort
        run: isort --check-only --profile black .

  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.8', '3.10']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Test with pytest
        run: |
          pytest --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  code-quality:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint radon bandit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run pylint
        run: |
          pylint --disable=C0111,R0903,C0103 --exit-zero $(git ls-files '*.py')
      - name: Run complexity analysis with radon
        run: |
          radon cc $(git ls-files '*.py') --average --show-closures --total-average
      - name: Run maintainability analysis with radon
        run: |
          radon mi $(git ls-files '*.py') --show

  security-scan:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run Bandit security scan
        run: |
          bandit -r . -x ./tests,./venv -ll
      - name: Check for dependency vulnerabilities
        run: |
          safety check -r requirements.txt || true

  build:
    runs-on: ubuntu-latest
    needs: [test, code-quality, security-scan]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: |
          python -m build
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist
            LICENSE
            README.md

  deploy-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: build
    environment:
      name: development
      url: https://dev.example.com
    steps:
      - uses: actions/checkout@v3
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible paramiko
      - name: Deploy to development
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.DEV_HOST }}
          SSH_USER: ${{ secrets.DEV_SSH_USER }}
          APP_ENV: development
        run: |
          echo "Deploying to development environment"
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          scp -r dist/* $SSH_USER@$SSH_HOST:/var/www/omega-dev/
          ssh $SSH_USER@$SSH_HOST "cd /var/www/omega-dev && ./deploy.sh $APP_ENV"

  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - uses: actions/checkout@v3
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible paramiko
      - name: Deploy to staging
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.STAGING_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
          APP_ENV: staging
        run: |
          echo "Deploying to staging environment"
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          scp -r dist/* $SSH_USER@$SSH_HOST:/var/www/omega-staging/
          ssh $SSH_USER@$SSH_HOST "cd /var/www/omega-staging && ./deploy.sh $APP_ENV"

  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: deploy-staging
    environment:
      name: production
      url: https://production.example.com
    steps:
      - uses: actions/checkout@v3
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible paramiko
      - name: Deploy to production
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.PROD_HOST }}
          SSH_USER: ${{ secrets.PROD_SSH_USER }}
          APP_ENV: production
        run: |
          echo "Deploying to production environment"
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          scp -r dist/* $SSH_USER@$SSH_HOST:/var/www/omega-prod/
          ssh $SSH_USER@$SSH_HOST "cd /var/www/omega-prod && ./deploy.sh $APP_ENV"

